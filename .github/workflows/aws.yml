name: EC2 배포 4

on:
  push:
    branches:
      - main
      - develop

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    services:
      h2:
        image: oscarfonts/h2:latest
        ports:
          - 9092:9092

      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 (Amazon Corretto) 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '17'

      - name: Gradle로 빌드 (개발 환경)
        run: ./gradlew -Dspring.profiles.active=prod clean build -x test

      - name: 빌드 결과 확인
        run: ls -al build/libs

      - name: 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: spring-app
          path: build/libs/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: 아티팩트 다운로드
        uses: actions/download-artifact@v4
        with:
          name: spring-app

      - name: 다운로드된 아티팩트 확인
        run: ls -al $GITHUB_WORKSPACE

      - name: SSH 키 설정
        run: |
          mkdir -p $HOME/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_BLUE_IP }} >> $HOME/.ssh/known_hosts

      - name: 디버깅 로그
        run: |
          echo "아티팩트 다운로드 경로 확인:"
          ls -al $GITHUB_WORKSPACE

      - name: Deploy to EC2 (Blue)
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          JAR_FILE=$(ls $GITHUB_WORKSPACE/*.jar | head -n 1)
          echo "배포할 JAR 파일: $JAR_FILE"
          if [ -z "$JAR_FILE" ]; then
            echo "배포할 JAR 파일을 찾을 수 없습니다."
            exit 1
          fi
          scp -i $HOME/.ssh/id_rsa -o StrictHostKeyChecking=no $JAR_FILE ec2-user@${{ secrets.EC2_BLUE_IP }}:/home/ec2-user/
          ssh -i $HOME/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_BLUE_IP }} 'bash -s' <<'EOF'
            export DB_URL=${DB_URL}
            export DB_USERNAME=${DB_USERNAME}
            export DB_PASSWORD=${DB_PASSWORD}
            pkill -f botox-0.0.1-SNAPSHOT.jar || true
            nohup java -jar /home/ec2-user/botox-0.0.1-SNAPSHOT.jar --server.port=8080 --spring.profiles.active=prod > /dev/null 2>&1 &
          EOF
